#!/usr/bin/env python3
"""
Setup Script untuk Bot Trading Binance Futures
Script ini membantu setup bot dengan mudah
"""

import os
import json
import sys

def create_config_file():
    """Buat file konfigurasi bot"""
    print("ü§ñ Setup Bot Trading Binance Futures")
    print("=" * 50)
    
    config = {}
    
    # Basic settings
    print("\nüìä TRADING SETTINGS:")
    config['modal_awal'] = float(input("Modal awal ($): ") or "5.0")
    config['symbol'] = input("Trading symbol (default: BTCUSDT): ") or "BTCUSDT"
    config['leverage'] = int(input("Leverage (1-20, default: 3): ") or "3")
    config['max_risk_per_trade'] = float(input("Risk per trade (0.01-0.05, default: 0.02): ") or "0.02")
    
    # Mode selection
    print("\nüéØ TRADING MODE:")
    print("1. Testnet (latihan)")
    print("2. Real trading (hati-hati!)")
    mode_choice = input("Pilih mode (1/2): ") or "1"
    config['is_testnet'] = mode_choice == "1"
    
    # API Keys
    print(f"\nüîë API KEYS ({'TESTNET' if config['is_testnet'] else 'REAL'}):")
    if config['is_testnet']:
        config['api_key'] = input("Testnet API Key: ")
        config['api_secret'] = input("Testnet Secret: ")
    else:
        print("‚ö†Ô∏è  WARNING: Real trading mode!")
        confirm = input("Yakin mau trading real? (yes/no): ")
        if confirm.lower() != 'yes':
            print("Setup dibatalkan.")
            return False
        config['api_key'] = input("Real API Key: ")
        config['api_secret'] = input("Real Secret: ")
    
    # Telegram
    print("\nüì± TELEGRAM SETTINGS:")
    config['telegram_token'] = input("Telegram Bot Token: ")
    config['telegram_chat_id'] = input("Telegram Chat ID: ")
    
    # Save config
    with open("bot_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print("\n‚úÖ Konfigurasi berhasil disimpan!")
    return True

def create_env_file():
    """Buat file environment variables"""
    env_content = f"""# Bot Trading Environment Variables
# Generated by setup script

BINANCE_API_KEY={input('Binance API Key: ')}
BINANCE_API_SECRET={input('Binance API Secret: ')}
TELEGRAM_TOKEN={input('Telegram Bot Token: ')}
TELEGRAM_CHAT_ID={input('Telegram Chat ID: ')}
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ File .env berhasil dibuat!")

def install_requirements():
    """Install dependencies"""
    print("\nüì¶ Installing dependencies...")
    os.system("pip install -r requirements_pro_trader.txt")
    print("‚úÖ Dependencies installed!")

def check_system():
    """Check system requirements"""
    print("\nüîç Checking system...")
    
    # Check Python version
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7+ required")
        return False
    
    print(f"‚úÖ Python {sys.version}")
    
    # Check memory
    try:
        import psutil
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        print(f"‚úÖ RAM: {memory_gb:.1f}GB")
        
        if memory_gb < 0.8:
            print("‚ö†Ô∏è  Warning: Low RAM detected")
    except:
        print("‚ö†Ô∏è  Could not check RAM")
    
    return True

def show_instructions():
    """Show final instructions"""
    print("\n" + "=" * 50)
    print("üöÄ SETUP SELESAI!")
    print("=" * 50)
    print("\nCara menjalankan bot:")
    print("1. python bot_binance_futures.py")
    print("\nCara control via Telegram:")
    print("‚Ä¢ /start - Mulai bot")
    print("‚Ä¢ /status - Cek status")
    print("‚Ä¢ /balance - Cek saldo")
    print("‚Ä¢ /testnet - Mode testnet")
    print("‚Ä¢ /real - Mode real trading")
    print("‚Ä¢ /stop - Stop bot")
    print("\nTips:")
    print("‚Ä¢ Mulai dengan testnet dulu")
    print("‚Ä¢ Monitor bot via Telegram")
    print("‚Ä¢ Gunakan leverage rendah")
    print("‚Ä¢ Set risk management ketat")
    print("\nSelamat trading! üìà")

def main():
    """Main setup function"""
    try:
        print("ü§ñ Bot Trading Binance Futures - Setup")
        print("Optimized untuk VPS 1GB RAM dengan modal $5")
        print("=" * 60)
        
        # Check system
        if not check_system():
            return
        
        # Install dependencies
        install_choice = input("\nInstall dependencies? (y/n): ") or "y"
        if install_choice.lower() == 'y':
            install_requirements()
        
        # Create config
        config_choice = input("\nBuat konfigurasi bot? (y/n): ") or "y"
        if config_choice.lower() == 'y':
            if not create_config_file():
                return
        
        # Show instructions
        show_instructions()
        
    except KeyboardInterrupt:
        print("\n\nSetup dibatalkan.")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main()